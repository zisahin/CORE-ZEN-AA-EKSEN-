name: 🔔 Kapsamli Slack Bildirimleri

on:
  # Push events - tum branchler
  push:
  
  # Branch/Tag olusturma ve silme
  create:
  delete:
  
  # Discussion events
  discussion:
    types: [created, edited, deleted, transferred, answered, unanswered]
  
  # Discussion Comment events
  discussion_comment:
    types: [created, edited, deleted]
  
  # Release events
  release:
    types: [published, edited, deleted, prereleased, released]
  
  # Wiki events
  gollum:
  
  # Star events
  watch:
    types: [started]
  
  # Fork events
  fork:

jobs:
  slack-notify:
    name: Slack Bildirim Gonder
    runs-on: ubuntu-latest
    
    steps:
      - name: 📊 Event Bilgilerini Hazirla
        id: prepare
        run: |
          echo "event_name=${{ github.event_name }}" >> $GITHUB_OUTPUT
          echo "actor=${{ github.actor }}" >> $GITHUB_OUTPUT
          echo "repo=${{ github.repository }}" >> $GITHUB_OUTPUT
          echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "sha_short=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
          echo "repo_url=https://github.com/${{ github.repository }}" >> $GITHUB_OUTPUT
          echo "timestamp=$(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
          
      - name: 📝 Mesaj Olustur
        id: prepare_message
        run: |
          EVENT_NAME="${{ steps.prepare.outputs.event_name }}"
          ACTOR="${{ steps.prepare.outputs.actor }}"
          REPO="${{ steps.prepare.outputs.repo }}"
          BRANCH="${{ steps.prepare.outputs.branch }}"
          SHA_SHORT="${{ steps.prepare.outputs.sha_short }}"
          REPO_URL="${{ steps.prepare.outputs.repo_url }}"
          TIMESTAMP="${{ steps.prepare.outputs.timestamp }}"
          
          # Event'e gore mesaj olustur
          case "$EVENT_NAME" in
            push)
              COMMIT_MSG="${{ github.event.head_commit.message }}"
              COMMIT_URL="${{ github.event.head_commit.url }}"
              
              if [ -n "$COMMIT_MSG" ]; then
                # Commit mesajini temizle (JSON icin)
                CLEAN_MSG=$(echo "$COMMIT_MSG" | sed 's/"/\\"/g; s/`/\\`/g' | tr '\n' ' ' | head -c 200)
                TEXT="🚀 **${ACTOR}** \`${BRANCH}\` branch'ine commit atti:\\n> 📝 *${CLEAN_MSG}*\\n🔗 <${COMMIT_URL}|${SHA_SHORT}>"
              else
                TEXT="🚀 **${ACTOR}** \`${BRANCH}\` branch'ine commit atti\\n🔗 <${REPO_URL}/commit/${SHA_SHORT}|${SHA_SHORT}>"
              fi
              ;;
              
            create)
              REF_TYPE="${{ github.event.ref_type }}"
              REF="${{ github.event.ref }}"
              
              if [ "$REF_TYPE" = "branch" ]; then
                TEXT="🌿 **${ACTOR}** yeni branch olusturdu: \`${REF}\`\\n🔗 <${REPO_URL}/tree/${REF}|Branch'i goruntule>"
              else
                TEXT="🏷️ **${ACTOR}** yeni tag olusturdu: \`${REF}\`\\n🔗 <${REPO_URL}/releases/tag/${REF}|Tag'i goruntule>"
              fi
              ;;
              
            delete)
              REF_TYPE="${{ github.event.ref_type }}"
              REF="${{ github.event.ref }}"
              
              TEXT="🗑️ **${ACTOR}** ${REF_TYPE} sildi: \`${REF}\`"
              ;;
              
            discussion)
              DISCUSSION_TITLE="${{ github.event.discussion.title }}"
              DISCUSSION_URL="${{ github.event.discussion.html_url }}"
              DISCUSSION_ACTION="${{ github.event.action }}"
              
              CLEAN_TITLE=$(echo "$DISCUSSION_TITLE" | sed 's/"/\\"/g' | tr '\n' ' ' | head -c 150)
              TEXT="🗣️ **${ACTOR}** Discussion ${DISCUSSION_ACTION}:\\n> 💬 *${CLEAN_TITLE}*\\n🔗 <${DISCUSSION_URL}|Discussion'i goruntule>"
              ;;
              
            discussion_comment)
              DISCUSSION_TITLE="${{ github.event.discussion.title }}"
              DISCUSSION_URL="${{ github.event.discussion.html_url }}"
              
              CLEAN_TITLE=$(echo "$DISCUSSION_TITLE" | sed 's/"/\\"/g' | tr '\n' ' ' | head -c 150)
              TEXT="💬 **${ACTOR}** Discussion'a yorum yapti:\\n> 🗣️ *${CLEAN_TITLE}*\\n🔗 <${DISCUSSION_URL}|Discussion'i goruntule>"
              ;;
              
            release)
              RELEASE_NAME="${{ github.event.release.name }}"
              RELEASE_TAG="${{ github.event.release.tag_name }}"
              RELEASE_URL="${{ github.event.release.html_url }}"
              RELEASE_ACTION="${{ github.event.action }}"
              
              CLEAN_NAME=$(echo "$RELEASE_NAME" | sed 's/"/\\"/g' | tr '\n' ' ' | head -c 100)
              TEXT="🎉 **${ACTOR}** yeni release yayinladi (${RELEASE_ACTION}):\\n> 🏷️ *${CLEAN_NAME}* (${RELEASE_TAG})\\n🔗 <${RELEASE_URL}|Release'i goruntule>"
              ;;
              
            watch)
              TEXT="⭐ **${ACTOR}** repository'yi yildizladi!\\n🔗 <${REPO_URL}|${REPO}>"
              ;;
              
            fork)
              FORK_URL="${{ github.event.forkee.html_url }}"
              TEXT="🍴 **${ACTOR}** repository'yi fork'ladi!\\n🔗 <${FORK_URL}|Fork'u goruntule>"
              ;;
              
            gollum)
              TEXT="📚 **${ACTOR}** Wiki'yi guncelledi\\n🔗 <${REPO_URL}/wiki|Wiki'yi goruntule>"
              ;;
              
            *)
              TEXT="📢 **${ACTOR}** bir etkinlik gerceklestirdi: *${EVENT_NAME}*\\n🔗 <${REPO_URL}|${REPO}>"
              ;;
          esac
          
          # Slack formatinda JSON payload olustur
          PAYLOAD=$(cat <<EOF
          {
            "text": "${TEXT}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "${TEXT}"
                }
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "📅 ${TIMESTAMP} | 🏷️ Event: \`${EVENT_NAME}\` | 📂 <${REPO_URL}|${REPO}>"
                  }
                ]
              }
            ]
          }
          EOF
          )
          
          echo "${PAYLOAD}" > payload.json
          
      - name: 🔔 Slack Mesaji Gonder
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload-file-path: "payload.json"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 
